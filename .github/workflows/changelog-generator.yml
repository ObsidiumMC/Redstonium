name: Generate Changelog

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to generate changelog for'
        required: false
        default: 'auto'

permissions:
  contents: write

jobs:
  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create changelog generator script
        run: |
          cat > generate_changelog.py << 'EOF'
          #!/usr/bin/env python3
          import subprocess
          import re
          from datetime import datetime
          from collections import defaultdict
          import sys

          def run_git_command(cmd):
              """Run a git command and return the output."""
              try:
                  result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
                  return result.stdout.strip()
              except Exception as e:
                  print(f"Error running git command: {e}")
                  return ""

          def parse_commit_message(message):
              """Parse conventional commit message."""
              # Pattern for conventional commits: type(scope): description
              pattern = r'^(feat|fix|docs|style|refactor|test|chore|perf|build|ci|revert)(\([^)]+\))?: (.+)$'
              match = re.match(pattern, message, re.IGNORECASE)
              
              if match:
                  commit_type = match.group(1).lower()
                  scope = match.group(2)[1:-1] if match.group(2) else None
                  description = match.group(3)
                  return commit_type, scope, description
              else:
                  # Fallback for non-conventional commits
                  return 'other', None, message

          def categorize_commit(commit_type):
              """Categorize commit type into changelog sections."""
              mapping = {
                  'feat': 'Added',
                  'fix': 'Fixed',
                  'docs': 'Changed',
                  'style': 'Changed',
                  'refactor': 'Changed',
                  'perf': 'Changed',
                  'test': 'Added',
                  'chore': 'Changed',
                  'build': 'Changed',
                  'ci': 'Changed',
                  'revert': 'Fixed',
                  'other': 'Changed'
              }
              return mapping.get(commit_type, 'Changed')

          def get_version_from_tag():
              """Get the latest version tag."""
              tags = run_git_command("git tag --sort=-version:refname | grep -E '^v[0-9]' | head -1")
              return tags.replace('v', '') if tags else '0.1.0'

          def get_commits_since_last_tag():
              """Get commits since the last tag."""
              last_tag = run_git_command("git describe --tags --abbrev=0 2>/dev/null")
              if last_tag:
                  commits = run_git_command(f"git log {last_tag}..HEAD --pretty=format:'%s|||%H|||%an|||%ad' --date=short")
              else:
                  commits = run_git_command("git log --pretty=format:'%s|||%H|||%an|||%ad' --date=short")
              
              return [line.split('|||') for line in commits.split('\n') if line.strip()]

          def generate_changelog():
              """Generate the changelog."""
              # Get version
              if len(sys.argv) > 1 and sys.argv[1] != 'auto':
                  version = sys.argv[1]
              else:
                  version = get_version_from_tag()
              
              # Get commits
              commits = get_commits_since_last_tag()
              
              # Group commits by category
              categories = defaultdict(list)
              
              for commit_data in commits:
                  if len(commit_data) >= 4:
                      message, hash_short, author, date = commit_data[:4]
                      
                      # Skip merge commits and changelog commits
                      if message.startswith('Merge') or 'CHANGELOG' in message.upper() or '[skip ci]' in message:
                          continue
                      
                      commit_type, scope, description = parse_commit_message(message)
                      category = categorize_commit(commit_type)
                      
                      # Format the entry
                      entry = f"- {description.capitalize()}"
                      if scope:
                          entry = f"- **{scope}**: {description.capitalize()}"
                      
                      categories[category].append(entry)
              
              # Generate changelog content
              current_date = datetime.now().strftime('%Y-%m-%d')
              
              changelog_content = f"""# Changelog

          All notable changes to this project will be documented in this file.

          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

          ## [{version}] - {current_date}

          """
              
              # Add categories in order
              for category in ['Added', 'Changed', 'Fixed', 'Removed']:
                  if category in categories and categories[category]:
                      changelog_content += f"### {category}\n"
                      for entry in sorted(set(categories[category])):  # Remove duplicates and sort
                          changelog_content += f"{entry}\n"
                      changelog_content += "\n"
              
              # Add previous changelog content if it exists
              try:
                  with open('CHANGELOG.md', 'r') as f:
                      existing_content = f.read()
                  
                  # Find the first version entry in existing changelog
                  version_pattern = r'\n## \[[^\]]+\] - \d{4}-\d{2}-\d{2}'
                  match = re.search(version_pattern, existing_content)
                  if match:
                      previous_content = existing_content[match.start():]
                      changelog_content += previous_content
              except FileNotFoundError:
                  pass
              
              # Write the new changelog
              with open('CHANGELOG.md', 'w') as f:
                  f.write(changelog_content)
              
              print(f"Generated changelog for version {version}")

          if __name__ == "__main__":
              generate_changelog()
          EOF

      - name: Generate changelog
        run: |
          python generate_changelog.py ${{ github.event.inputs.version || 'auto' }}

      - name: Update version if tagged
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          python generate_changelog.py $VERSION

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if ! git diff --exit-code CHANGELOG.md; then
            git add CHANGELOG.md
            git commit -m "docs: auto-update CHANGELOG.md [skip ci]"
            git push
          else
            echo "No changes to CHANGELOG.md"
          fi
