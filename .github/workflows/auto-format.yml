name: Auto-Format Code

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize]

# This workflow automatically formats code on every push and PR

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: auto-format-${{ github.ref }}
  cancel-in-progress: false

jobs:
  auto-format:
    name: Auto-Format Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Check if formatting is needed
        id: format-check
        run: |
          if ! cargo fmt --all -- --check; then
            echo "needs_formatting=true" >> $GITHUB_OUTPUT
            echo "Code needs formatting"
          else
            echo "needs_formatting=false" >> $GITHUB_OUTPUT
            echo "Code is already properly formatted"
          fi

      - name: Format code
        if: steps.format-check.outputs.needs_formatting == 'true'
        run: |
          echo "üîß Auto-formatting code..."
          cargo fmt --all

          # Check if there are any changes
          if [[ `git status --porcelain` ]]; then
            echo "‚úÖ Code has been formatted"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No formatting changes needed"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
        id: format

      - name: Commit and push changes
        if: steps.format.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add -A
          git commit -m "ü§ñ Auto-format code with cargo fmt

          This commit was automatically generated by the auto-format workflow.

          Co-authored-by: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"

          # Handle potential race conditions with other workflows
          for i in {1..3}; do
            if git push; then
              echo "‚úÖ Successfully pushed formatting changes"
              break
            else
              echo "‚ö†Ô∏è Push failed (attempt $i/3), fetching latest changes..."
              git fetch origin ${GITHUB_REF#refs/heads/}
              git rebase origin/${GITHUB_REF#refs/heads/}
              if [ $? -ne 0 ]; then
                echo "‚ùå Rebase failed, aborting"
                git rebase --abort
                exit 1
              fi
            fi
            
            if [ $i -eq 3 ]; then
              echo "‚ùå Failed to push after 3 attempts"
              exit 1
            fi
            
            sleep 5
          done

      - name: Comment on PR
        if: steps.format.outputs.has_changes == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ü§ñ **Auto-formatted code**\n\nI\'ve automatically formatted your code using `cargo fmt`. The changes have been committed to this PR.\n\n> **Note:** This is an automated process to maintain consistent code formatting.'
            })

      - name: Summary
        run: |
          if [ "${{ steps.format-check.outputs.needs_formatting }}" == "true" ]; then
            if [ "${{ steps.format.outputs.has_changes }}" == "true" ]; then
              echo "‚úÖ Code was successfully auto-formatted and committed"
            else
              echo "‚ÑπÔ∏è Formatting was needed but no actual changes were made"
            fi
          else
            echo "‚úÖ Code was already properly formatted"
          fi
