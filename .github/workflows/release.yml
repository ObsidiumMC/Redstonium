name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release"
        required: false
        default: "v0.1.0"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract changelog content
        id: changelog
        run: |
          VERSION="${{ github.event.inputs.tag_name || github.ref_name }}"
          VERSION_NUMBER="${VERSION#v}"  # Remove 'v' prefix if present
          
          # Extract the changelog section for this version
          python3 << 'EOF'
          import re
          import sys
          
          version = "$VERSION_NUMBER"
          
          try:
              with open('CHANGELOG.md', 'r') as f:
                  content = f.read()
              
              # Find the section for this version
              # Look for ## [version] - date
              pattern = rf'## \[{re.escape(version)}\][^\n]*\n(.*?)(?=\n## \[|\n#[^#]|\Z)'
              match = re.search(pattern, content, re.DOTALL)
              
              if match:
                  release_notes = match.group(1).strip()
                  # Clean up the content - remove extra newlines
                  release_notes = re.sub(r'\n{3,}', '\n\n', release_notes)
                  
                  # Save to file for GitHub Actions
                  with open('release_notes.md', 'w') as f:
                      f.write(release_notes)
                  print(f"‚úÖ Found changelog content for version {version}")
                  print("üìù Release notes:")
                  print(release_notes[:200] + "..." if len(release_notes) > 200 else release_notes)
              else:
                  print(f"‚ö†Ô∏è No changelog entry found for version {version}")
                  print("üîç Available versions in changelog:")
                  # Show available versions
                  version_pattern = r'## \[([^\]]+)\]'
                  versions = re.findall(version_pattern, content)
                  for v in versions[:5]:  # Show first 5 versions
                      print(f"  - {v}")
                  
                  # Create fallback content
                  with open('release_notes.md', 'w') as f:
                      f.write(f"Release {version} of Rustified Minecraft Launcher.\n\nSee [CHANGELOG.md](./CHANGELOG.md) for detailed changes.")
          except Exception as e:
              print(f"‚ùå Error processing changelog: {e}")
              with open('release_notes.md', 'w') as f:
                  f.write(f"Release {version} of Rustified Minecraft Launcher.\n\nSee [CHANGELOG.md](./CHANGELOG.md) for detailed changes.")
          EOF

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          release_name: ${{ github.event.inputs.tag_name || github.ref_name }}
          body_path: release_notes.md

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            name: rustified-macos-arm64

          # macOS x64 (Intel)
          - target: x86_64-apple-darwin
            os: macos-latest
            name: rustified-macos-x64

          # Windows x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: rustified-windows-x64.exe

          # Linux x64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: rustified-linux-x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose

      - name: Strip binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          strip target/${{ matrix.target }}/release/rustified

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          copy target\${{ matrix.target }}\release\rustified.exe rustified.exe

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/rustified rustified

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./rustified${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --verbose

      - name: Run clippy
        run: cargo clippy --all-targets --all-features

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit
