name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows
            extension: .exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-intel
            extension: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-apple
            extension: ""
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux
            extension: ""
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Prepare release asset
        id: prep
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          BINARY_NAME="Rustified${{ matrix.extension }}"
          RELEASE_NAME="Rustified-$TAG_NAME-${{ matrix.name }}"
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "target/${{ matrix.target }}/release/${BINARY_NAME}" "release/${RELEASE_NAME}${{ matrix.extension }}"
            echo "asset_path=release/${RELEASE_NAME}${{ matrix.extension }}" >> $GITHUB_OUTPUT
          else
            cp "target/${{ matrix.target }}/release/Rustified" "release/${BINARY_NAME}"
            cd release
            tar -czf "${RELEASE_NAME}.tar.gz" "${BINARY_NAME}"
            rm "${BINARY_NAME}"
            cd ..
            echo "asset_path=release/${RELEASE_NAME}.tar.gz" >> $GITHUB_OUTPUT
          fi
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.prep.outputs.asset_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
